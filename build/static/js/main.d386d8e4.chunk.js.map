{"version":3,"sources":["components/Header.js","components/CommandLine.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","src","alt","this","props","commands","map","command","Component","CommandLine","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","document","addEventListener","event","key","string","substring","length","setState","execute","type","value","readOnly","App","history","pwd","scheme","photos","games","videos","String","prototype","replaceAll","search","replacement","replace","RegExp","lines","concat","toConsumableArray","dir","push","environment","toString","phone","email","position","company","dates","description","social","window","scrollTo","body","scrollHeight","src_components_Header","i","dangerouslySetInnerHTML","__html","src_components_CommandLine","bind","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d386d8e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.scss';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"Header\">\n                <img src=\"assets/logo.png\" alt=\"Jade Allen Cook Signature\" />\n                <div>Digital Artist & Web Developer</div>\n                <div>This is an interactive website...</div>\n                <br />\n                <div>available commands: {this.props.commands.map(command => {\n                    return command + ' '\n                })}</div>\n                <br />\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './CommandLine.scss';\n\nclass CommandLine extends Component {\n    constructor() {\n        super();\n        this.state = {\n            command: ''\n        }\n        document.addEventListener('keydown', event => {\n            const key = event.key;\n            let string = this.state.command;\n            if (key === 'Backspace') {\n                string = string.substring(0, string.length - 1);\n                this.setState({\n                    command: string\n                });\n            } else if (key === 'Enter') {\n              this.props.execute(string);\n              this.setState({\n                  command: ''\n              });\n            } else if (key.length === 1) {\n                string += key;\n                this.setState({\n                    command: string\n                });\n            }\n        })\n    }\n    render() {\n        return (\n            <div className=\"CommandLine\">\n                <span>[root@jadeallencook]#</span>\n                <input type=\"text\" value={this.state.command + '_'} readOnly />\n            </div>\n        )\n    }\n}\n\nexport default CommandLine;","import React, { Component } from 'react';\nimport './App.scss';\nimport environment from './environments/environment.json';\n\nimport Header from './components/Header.js';\nimport CommandLine from './components/CommandLine';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [],\n      pwd: [],\n      scheme: {\n        photos: {},\n        games: {},\n        videos: {}\n      }\n    };\n    String.prototype.replaceAll = function(search, replacement) {\n      const target = this;\n      return target.replace(new RegExp(search, 'g'), replacement);\n    };\n  }\n  execute(command) {\n    let lines = [];\n    this.setState({\n      history: [...this.state.history, `[root@jadeallencook]# ${command}`]\n    });\n    if (command === 'clear') {\n      this.setState({\n        history: []\n      });\n    } else if (command === 'pwd') {\n      lines = (this.state.pwd.length !== 0) ? this.state.pwd.map(dir => `/${dir}`) : `/`;\n    } else if (command === 'ls') {\n      lines = [];\n    } else if (command === 'help') {\n      lines.push(environment.commands.toString().replaceAll(',', ' '));\n    } else if (!environment[command]) {\n      lines = [\n        `${command}: command not found\\n`\n      ]\n    } else {\n      if (command === 'bio') {\n        lines = [\n          null,\n          environment[command],\n          null\n        ]\n      } else if (command === 'contact') {\n        lines = [\n          null,\n          `phone: ${environment[command].phone}`,\n          `email: ${environment[command].email}`,\n          null\n        ]\n      } else if (command === 'resume') {\n        environment[command].map(position => {\n          lines = [\n            ...lines,\n            null,\n            position.company,\n            position.dates,\n            position.description\n          ]\n        });\n        lines = [...lines, null];\n      } else if (command === 'social') {\n        lines = [null];\n        environment[command].map(social => {\n          lines = [\n            ...lines,\n            `<a href=\"#\">https://www.${social}.com/jadeallencook</a>`\n          ]\n        });\n        lines = [...lines, null];\n      }\n    }\n    this.setState({\n      history: [...this.state.history, ...lines]\n    });\n    window.scrollTo(0,document.body.scrollHeight);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header commands={environment.commands} />\n        {\n          this.state.history.map((command, i) => {\n            return (<div className=\"line\" key={`command-${i}`}  dangerouslySetInnerHTML={{__html: command}}></div>);\n          })\n        }\n        <CommandLine execute={this.execute.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}